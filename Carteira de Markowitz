# Instalando pacotes necessários

#install.packages("BatchGetSymbols")
#install.packages("tidyverse")
#install.packages("boot")
#install.packages(ggplot2)

library(BatchGetSymbols)
library(tidyverse)
library(boot)
library(ggplot2)

# Definindo as datas e a frequência da pesquisa

primeira_data <- as.Date("2018-01-01")
ultima_data <- Sys.Date()
frequencia <- "monthly"

# Definindo os ativos procurados

ativos <- c("ABEV3.SA", "AZUL4.SA", "GGBR3.SA", "GOLL11.SA", "ITUB4.SA",
            "MGLU3.SA", "PETR3.SA", "PSSA3.SA", "VALE3.SA", "WEGE3.SA")

# Extraindo os dados dos ativos

output <- BatchGetSymbols(tickers = ativos,
                          first.date = primeira_data,
                          last.date = ultima_data,
                          freq.data = frequencia,
                          cache.folder = file.path(tempdir(),
                                                   "BGS_Cache"))
# Visualizando os dados

print(output$df.control)

# Visualizando o histórico dos ativos

historico <- ggplot(output$df.tickers,
             aes(x = ref.date,
                 y = price.close)) +
             geom_line() +
             facet_wrap(~ ticker,
                        scales = "free_y")

print(historico)

# Extraindo os retornos

ambev <- output$df.tickers %>% 
         na.omit() %>% 
         filter(ticker == "ABEV3.SA") %>% 
         select(ret.closing.prices) %>% 
         rename(ambev = ret.closing.prices)

azul <- output$df.tickers %>% 
        na.omit() %>% 
        filter(ticker == "AZUL4.SA") %>% 
        select(ret.closing.prices) %>% 
        rename(azul = ret.closing.prices)

gerdal <- output$df.tickers %>% 
          na.omit() %>% 
          filter(ticker == "GGBR3.SA") %>% 
          select(ret.closing.prices) %>% 
          rename(gerdal = ret.closing.prices)

#gol <- outputt$df.tickers %>% 
#       na.omit() %>% 
#       filter(ticker == "GOLL11.SA") %>% 
#       select(ret.closing.prices) %>% 
#       rename(gol = ret.closing.prices)

#itau <- outputt$df.tickers %>% 
#        na.omit() %>% 
#        filter(ticker == "ITU4.SA") %>% 
#        select(ret.closing.prices) %>% 
#        rename(itau = ret.closing.prices)

magalu <- output$df.tickers %>% 
          na.omit() %>% 
          filter(ticker == "MGLU3.SA") %>% 
          select(ret.closing.prices) %>% 
          rename(magalu = ret.closing.prices)

petrobras <- output$df.tickers %>% 
             na.omit() %>% 
             filter(ticker == "PETR3.SA") %>% 
             select(ret.closing.prices) %>% 
             rename(petrobras = ret.closing.prices)

porto <- output$df.tickers %>% 
         na.omit() %>% 
         filter(ticker == "PSSA3.SA") %>% 
         select(ret.closing.prices) %>% 
         rename(porto = ret.closing.prices)

vale <- output$df.tickers %>% 
        na.omit() %>% 
        filter(ticker == "VALE3.SA") %>% 
        select(ret.closing.prices) %>% 
        rename(vale = ret.closing.prices)

weg <- output$df.tickers %>% 
       na.omit() %>% 
       filter(ticker == "WEGE3.SA") %>% 
       select(ret.closing.prices) %>% 
       rename(weg = ret.closing.prices)

retornos <- cbind(ambev, azul, gerdal, magalu, petrobras, porto, vale,
                  weg)

# Instalando pacote necessário e modelando os retornos enquanto séries temporais

#install.packages("fPortfolio")

library(fPortfolio)

retornos <- as.timeSeries(retornos)

# Definindo o portfólio eficiente

portfolio_eficiente <- tangencyPortfolio(retornos, spec = portfolioSpec(),
                                         constraints = "LongOnly")
portfolio_eficiente

# Definindo o portfólio de menor risco

portfolio_menor_risco <- minvariancePortfolio(retornos,
                                              spec = portfolioSpec(),
                                              constraints = "LongOnly")
portfolio_menor_risco

# Definindo e visualizando a fronteira de eficiência

fronteira <- portfolioFrontier(retornos)

frontierPlot(fronteira, col = c("blue", "red"), pch = 20)

monteCarloPoints(fronteira, mcSteps = 5000, pch = 20, cex = 0.25)

# Extraindo os pesos dos ativos da carteira

getWeights(portfolio_eficiente)
getWeights(portfolio_menor_risco)
